{"version":3,"sources":["utils/getSelectedZoneObj.ts","types/zone.ts","utils/getZoneStatusProps.ts","components/HistoryGraph/Chart.tsx","utils/getDateRange.tsx","components/HistoryGraph/Graph.tsx"],"names":["getSelectedZoneObjById","id","zones","find","zone","_id","ZoneStatus","PlaceType","getZoneStatusProps","status","t","textColorInWhite","textColorInBlue","text","bgColor","DANGEROUS","RISKY","SAFE","textInWhiteBg","textInBlueishBg","ChartDateFormats","getDateRange","left","right","data","from","minVisible","to","range","moment","toDate","length","dataRangeFrom","dataRangeTo","_from","_to","add","_range","diff","isCurrentInsideRange","isSameOrAfter","isSameOrBefore","isChangeInsideRange","subtract","Math","abs","format","INNER","filter","d","index","isSame","isMinVisRangeIsInsideOfData","isBefore","extendedTo","isAfter","extendedFrom","useStyles","makeStyles","container","borderRadius","btnStyle","backgroundColor","height","width","React","memo","props","useTranslation","date_list","map","date","classes","useState","isGrabbed","setIsGrabbed","currentVisibleTicks","setCurrentVisibleTicks","canvas","useRef","chart","useEffect","dataFromRange","current","ChartJs","type","labels","datasets","label","borderColor","h","infectedNumber","recoveredNumber","deadNumber","options","elements","line","fill","legend","display","tooltips","mode","intersect","enabled","custom","tooltipModel","tooltipEl","document","getElementById","createElement","innerHTML","body","appendChild","opacity","classList","remove","yAlign","titleLines","title","bodyLines","bodyItem","lines","innerHtml","forEach","DISPLAY","i","style","labelColors","querySelector","position","getBoundingClientRect","zIndex","transform","padding","window","pageXOffset","caretX","top","pageYOffset","caretY","fontFamily","fontSize","bodyFontSize","fontStyle","_bodyFontStyle","pointerEvents","scales","xAxes","time","unit","minUnit","displayFormats","day","ticks","min","max","fontColor","gridLines","drawBorder","yAxes","beginAtZero","maxTicksLimit","plugins","zoom","pan","rangeMin","x","Date","setHours","getHours","rangeMax","setDate","getDate","onPan","onPanComplete","year","onZoom","updateRange","newRange","minTime","maxTime","update","Box","pt","pr","pb","bgcolor","className","pl","Grid","justify","Typography","variant","visibleMonths","Set","getUniqueVisibleMonth","join","item","IconButton","onClick","size","m","positiveRangeFrom","cursor","ref","Graph","useContext","StateContext","selectedZoneId","selectedZone","properties","history","mt","mb"],"mappings":"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","file":"static/js/Graph.600aae7b.chunk.js","sourcesContent":["import { Zone } from \"../types/zone\";\r\n\r\nexport const getSelectedZoneObjById = (id: string, zones: Zone[] = []) => {\r\n  return zones.find((zone) => zone._id === id);\r\n};\r\n","import { BBox } from \"@turf/turf\";\r\n\r\nexport enum ZoneStatus {\r\n  DANGEROUS = \"DANGEROUS\",\r\n  RISKY = \"RISKY\",\r\n  SAFE = \"SAFE\",\r\n}\r\n\r\nexport enum PlaceType {\r\n  DISTRICT = \"DISTRICT\",\r\n  CITY = \"CITY\",\r\n  REGION = \"REGION\",\r\n  COUNTRY = \"COUNTRY\",\r\n}\r\n\r\nexport type Total = {\r\n  infectedNumber: number;\r\n  recoveredNumber: number;\r\n  deadNumber: number;\r\n};\r\nexport type History = {\r\n  _id: string;\r\n  infectedNumber: number;\r\n  recoveredNumber: number;\r\n  deadNumber: number;\r\n  date: Date;\r\n};\r\n\r\nexport type Zone = {\r\n  _id: string;\r\n  type:\r\n    | \"FeatureCollection\"\r\n    | \"Feature\"\r\n    | \"GeometryCollection\"\r\n    | \"Point\"\r\n    | \"MultiPoint\"\r\n    | \"LineString\"\r\n    | \"MultiLineString\"\r\n    | \"Polygon\"\r\n    | \"MultiPolygon\";\r\n  properties: {\r\n    displayNameUz: string;\r\n    displayNameRu: string;\r\n    alias: string[];\r\n    refId: number;\r\n    parentZone: number;\r\n    childZones: number[];\r\n    placeType: PlaceType;\r\n    status: ZoneStatus;\r\n    total: Total;\r\n    history: History[];\r\n    restrictionsUz: any;\r\n    restrictionsRu: any;\r\n  };\r\n  bbox: [number, number, number, number];\r\n  geometry: {\r\n    type:\r\n      | \"FeatureCollection\"\r\n      | \"Feature\"\r\n      | \"GeometryCollection\"\r\n      | \"Point\"\r\n      | \"MultiPoint\"\r\n      | \"LineString\"\r\n      | \"MultiLineString\"\r\n      | \"Polygon\"\r\n      | \"MultiPolygon\";\r\n    coordinates: [];\r\n  };\r\n};\r\n","import { ZoneStatus } from \"../types/zone\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { TFunction } from \"i18next\";\r\n\r\nconst getZoneStatusProps = (status: ZoneStatus, t?: TFunction) => {\r\n  let textColorInWhite: string = \"\",\r\n    textColorInBlue: string = \"\",\r\n    text: string | undefined = \"\",\r\n    bgColor: string = \"\";\r\n  switch (status) {\r\n    case ZoneStatus.DANGEROUS:\r\n      textColorInWhite = \"#EA5C73\";\r\n      textColorInBlue = \"#FF4967\";\r\n      text = t && t(\"selectedZoneName.statusBadge.dangerous\");\r\n      bgColor = \"#ff0c0c26\";\r\n      break;\r\n    case ZoneStatus.RISKY:\r\n      textColorInWhite = \"#EF7C38\";\r\n      textColorInBlue = \"#FF9635\";\r\n      text = t && t(\"selectedZoneName.statusBadge.warning\");\r\n      bgColor = \"#ffeb0159\";\r\n      break;\r\n    case ZoneStatus.SAFE:\r\n      textColorInWhite = \"#87D03F\";\r\n      textColorInBlue = \"#87D03F\";\r\n      text = t && t(\"selectedZoneName.statusBadge.safe\");\r\n      bgColor = \"#8ff8293d\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return {\r\n    textInWhiteBg: textColorInWhite,\r\n    textInBlueishBg: textColorInBlue,\r\n    text: text,\r\n    bgColor: bgColor,\r\n  };\r\n};\r\n\r\nexport default getZoneStatusProps;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { History, ZoneStatus } from \"../../types/zone\";\r\nimport moment from \"moment\";\r\nimport \"chartjs-plugin-zoom/dist/chartjs-plugin-zoom\";\r\nimport ChartJs from \"chart.js\";\r\nimport getZoneStatusProps from \"../../utils/getZoneStatusProps\";\r\nimport {\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  IconButton,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport NavigateNextRoundedIcon from \"@material-ui/icons/NavigateNextRounded\";\r\nimport NavigateBeforeRoundedIcon from \"@material-ui/icons/NavigateBeforeRounded\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { getDateRange } from \"utils/getDateRange\";\r\n\r\nexport enum ChartDateFormats {\r\n  INNER = \"YYYY-MM-DD\",\r\n  DISPLAY = \"DD MMM YYYY\",\r\n  DISPLAY_NO_YEAR = \"DD MMM\",\r\n  MONTH = \"MMM\",\r\n}\r\n\r\nexport interface ChartProps {\r\n  data: History[];\r\n  minVisible: number;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    borderRadius: 9,\r\n  },\r\n  btnStyle: {\r\n    backgroundColor: \"white\",\r\n    height: 32,\r\n    width: 32,\r\n  },\r\n});\r\n\r\nconst Chart: React.SFC<ChartProps> = (props) => {\r\n  const { data, minVisible } = props;\r\n  const { t } = useTranslation();\r\n  let date_list = data.map((d) =>\r\n    moment(d.date).format(ChartDateFormats.INNER)\r\n  );\r\n  const classes = useStyles();\r\n  const [isGrabbed, setIsGrabbed] = useState(false);\r\n  const [currentVisibleTicks, setCurrentVisibleTicks] = useState({\r\n    from: date_list[date_list.length - 1],\r\n    range: -minVisible,\r\n  });\r\n  const canvas = useRef<any>();\r\n  const chart = useRef<Chart>();\r\n\r\n  useEffect(() => {\r\n    const dataFromRange = getDateRange({\r\n      data: date_list,\r\n      minVisible: minVisible,\r\n      from: currentVisibleTicks.from,\r\n      range: -Math.abs(currentVisibleTicks.range),\r\n    });\r\n    chart.current = new ChartJs(canvas.current, {\r\n      type: \"line\",\r\n      data: {\r\n        labels: date_list,\r\n        // labels: [...data.map((h) => new Date(h.date))],\r\n        datasets: [\r\n          {\r\n            label: t(\"dataType.infected\"),\r\n            borderColor: getZoneStatusProps(ZoneStatus.RISKY).textInBlueishBg,\r\n            backgroundColor: getZoneStatusProps(ZoneStatus.RISKY)\r\n              .textInBlueishBg,\r\n            data: [...data.map((h) => h.infectedNumber)],\r\n          },\r\n          {\r\n            label: t(\"dataType.recovered\"),\r\n            borderColor: getZoneStatusProps(ZoneStatus.SAFE).textInBlueishBg,\r\n            backgroundColor: getZoneStatusProps(ZoneStatus.SAFE)\r\n              .textInBlueishBg,\r\n            data: [...data.map((h) => h.recoveredNumber)],\r\n          },\r\n          {\r\n            label: t(\"dataType.dead\"),\r\n            borderColor: getZoneStatusProps(ZoneStatus.DANGEROUS).textInBlueishBg,\r\n            backgroundColor: getZoneStatusProps(ZoneStatus.DANGEROUS).textInBlueishBg,\r\n            data: [...data.map((h) => h.deadNumber)],\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        elements: {\r\n          line: {\r\n            fill: false,\r\n          },\r\n        },\r\n        legend: {\r\n          display: false,\r\n        },\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n          // callbacks: {\r\n          //   title: (item: any, data: any) => {\r\n          //     return moment(item[0].label).format(ChartDateFormats.DISPLAY);\r\n          //   },\r\n          // },\r\n          // backgroundColor: \"white\",\r\n          // titleFontSize: 14,\r\n          // titleFontColor: \"#242B43\",\r\n          // // titleFontStyle: 'inherit 600',\r\n          // bodyFontColor: \"#242B43\",\r\n          // bodyFontSize: 12,\r\n          // // bodyFontStyle: 'inherit',\r\n          // displayColors: false,\r\n          enabled: false,\r\n          custom: function(tooltipModel) {\r\n              // Tooltip Element\r\n              var tooltipEl: any = document.getElementById('chartjs-tooltip');\r\n\r\n              // Create element on first render\r\n              if (!tooltipEl) {\r\n                  tooltipEl = document.createElement('div');\r\n                  tooltipEl.id = 'chartjs-tooltip';\r\n                  tooltipEl.innerHTML = '<table></table>';\r\n                  document.body.appendChild(tooltipEl);\r\n              }\r\n\r\n              // Hide if no tooltip\r\n              if (tooltipModel.opacity === 0) {\r\n                  tooltipEl.style.opacity = 0;\r\n                  return;\r\n              }\r\n\r\n              // Set caret Position\r\n              tooltipEl.classList.remove('above', 'below', 'no-transform');\r\n              if (tooltipModel.yAlign) {\r\n                  tooltipEl.classList.add(tooltipModel.yAlign);\r\n              } else {\r\n                  tooltipEl.classList.add('no-transform');\r\n              }\r\n\r\n              function getBody(bodyItem: any) {\r\n                  return bodyItem.lines;\r\n              }\r\n\r\n              // Set Text\r\n              if (tooltipModel.body) {\r\n                  var titleLines = tooltipModel.title || [];\r\n                  var bodyLines = tooltipModel.body.map(getBody);\r\n\r\n                  var innerHtml = '<thead>';\r\n\r\n                  titleLines.forEach(function(title) {\r\n                    let style = 'color: #2C3D97; '\r\n                    // style += 'font-family: Rubik; '\r\n                    style += 'font-weight: 500; '\r\n                    style += 'font-size: 14px; '\r\n                    style += 'line-height: 16px; '\r\n                    style += 'text-align: left; '\r\n                    \r\n                    innerHtml += '<tr><th style=\"' + style + '\">' + moment(title).format(ChartDateFormats.DISPLAY) + '</th></tr>';\r\n                  });\r\n                  innerHtml += '</thead><tbody>';\r\n\r\n                  bodyLines.forEach(function(body, i) {\r\n                      // var colors: any = tooltipModel.labelColors[i];\r\n                      // var style = 'background:' + colors.backgroundColor;\r\n                      // style += '; border-color:' + colors.borderColor;\r\n                      // style += '; border-width: 2px';\r\n                      // var span = '<span style=\"' + style + '\"></span>';\r\n                      let style = 'color: ' + (tooltipModel.labelColors[i] as any).backgroundColor + '; ';\r\n                      style += 'font-weight: 400; '\r\n                      style += 'font-size: 14px; '\r\n                      style += 'line-height: 16px; '\r\n                      style += 'text-align: left; '\r\n                      innerHtml += '<tr><td style=\"' + style + '\">' + body + '</td></tr>';\r\n                  });\r\n                  innerHtml += '</tbody>';\r\n\r\n                  var tableRoot = tooltipEl.querySelector('table');\r\n                  tableRoot.innerHTML = innerHtml;\r\n              }\r\n\r\n              // `this` will be the overall tooltip\r\n              var position: any = canvas.current.getBoundingClientRect();\r\n              // Display, position, and set styles for font\r\n              tooltipEl.style.opacity = 1;\r\n              tooltipEl.style.zIndex = 10000;\r\n              tooltipEl.style.transform = 'translate(10px, -100%)';\r\n              tooltipEl.style.padding = '8px 10px';\r\n              tooltipEl.style.position = 'absolute';\r\n              tooltipEl.style.backgroundColor = 'white';\r\n              tooltipEl.style.borderRadius = '6px';\r\n              tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';\r\n              tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';\r\n              tooltipEl.style.fontFamily = 'Rubik';\r\n              // tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;\r\n              tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';\r\n              tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;\r\n              // tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';\r\n              tooltipEl.style.pointerEvents = 'none';\r\n          }\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              position: \"top\",\r\n              type: \"time\",\r\n              time: {\r\n                // parser: \"DD MMM\",\r\n                // tooltipFormat: \"DD MMM\",\r\n                unit: \"day\",\r\n                minUnit: \"day\",\r\n                displayFormats: {\r\n                  day: \"DD\",\r\n                },\r\n              },\r\n              ticks: {\r\n                padding: 24,\r\n                min: dataFromRange.from,\r\n                max: dataFromRange.to,\r\n                fontColor: \"#2C3D97\",\r\n                fontFamily: \"Rubik\",\r\n                fontSize: 16,\r\n                fontStyle: \"bold\",\r\n                // callback: (value: number | string, index: number, values: any) => {\r\n                //   const date = values.find((v: any, i: number) => i === index)?.value\r\n                //   const day = moment(date).format('DD')\r\n                //   const weekDay = moment(date).format('ddd')\r\n                //   return day\r\n                // }\r\n              },\r\n              gridLines: {\r\n                drawBorder: false,\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              position: \"right\",\r\n              gridLines: {\r\n                display: false,\r\n                drawBorder: false,\r\n              },\r\n              ticks: {\r\n                beginAtZero: true,\r\n                padding: 16,\r\n                maxTicksLimit: 6,\r\n                fontFamily: \"Rubik\",\r\n                fontStyle: \"normal\",\r\n                fontSize: 12,\r\n                fontColor: \"rgba(123, 129, 163, 0.5)\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          zoom: {\r\n            // Container for pan options\r\n            pan: {\r\n              // Boolean to enable panning\r\n              enabled: true,\r\n\r\n              // Panning directions. Remove the appropriate direction to disable\r\n              // Eg. 'y' would only allow panning in the y direction\r\n              // A function that is called as the user is panning and returns the\r\n              // available directions can also be used:\r\n              //   mode: function({ chart }) {\r\n              //     return 'xy';\r\n              //   },\r\n              mode: \"x\",\r\n\r\n              rangeMin: {\r\n                //   // Format of min pan range depends on scale type\r\n                x: new Date(date_list[0]).setHours(\r\n                  new Date(date_list[0]).getHours() - 4\r\n                  // new Date(date_list[0]).getHours() - 4\r\n                ),\r\n                //   y: null,\r\n              },\r\n              rangeMax: {\r\n                //   // Format of max pan range depends on scale type\r\n                x: new Date(date_list[date_list.length - 1]).setDate(\r\n                  new Date(date_list[date_list.length - 1]).getDate()\r\n                ),\r\n                //   y: null,\r\n              },\r\n\r\n              // // On category scale, factor of pan velocity\r\n              // speed: 40,\r\n\r\n              // // Minimal pan distance required before actually applying pan\r\n              // threshold: 10,\r\n\r\n              // Function called while the user is panning\r\n              onPan: function () {\r\n                setIsGrabbed(true);\r\n              },\r\n              // // Function called once panning is completed\r\n              onPanComplete: function ({ chart }: { chart: any }) {\r\n                const from = chart.scales[\"x-axis-0\"].ticks[0];\r\n                const range = chart.scales[\"x-axis-0\"].ticks.length - 1;\r\n                setCurrentVisibleTicks({\r\n                  from: moment(from).format(`[${moment().year()}]-MM-DD`),\r\n                  range,\r\n                });\r\n                setIsGrabbed(false);\r\n              },\r\n            },\r\n            // Container for zoom options\r\n            zoom: {\r\n              // Boolean to enable zooming\r\n              enabled: false,\r\n\r\n              // Enable drag-to-zoom behavior\r\n              // drag: true,\r\n\r\n              // Drag-to-zoom effect can be customized\r\n              // drag: {\r\n              // \t borderColor: 'rgba(225,225,225,0.3)'\r\n              // \t borderWidth: 5,\r\n              // \t backgroundColor: 'rgb(225,225,225)',\r\n              // \t animationDuration: 0\r\n              // },\r\n\r\n              // Zooming directions. Remove the appropriate direction to disable\r\n              // Eg. 'y' would only allow zooming in the y direction\r\n              // A function that is called as the user is zooming and returns the\r\n              // available directions can also be used:\r\n              //   mode: function({ chart: any }) {\r\n              //     return 'xy';\r\n              //   },\r\n              mode: \"x\",\r\n\r\n              rangeMin: {\r\n                // Format of min zoom range depends on scale type\r\n                x: new Date(date_list[0]).setHours(\r\n                  new Date(date_list[0]).getHours() - 4\r\n                ),\r\n                // x: moment.min(data.map((h) => moment(h.date))).format(\"DD MMM\"),\r\n                // y: null,\r\n              },\r\n              rangeMax: {\r\n                // Format of max zoom range depends on scale type\r\n                x: new Date(date_list[date_list.length - 1]).setDate(\r\n                  new Date(date_list[date_list.length - 1]).getDate()\r\n                ),\r\n                // y: null,\r\n              },\r\n\r\n              // // Speed of zoom via mouse wheel\r\n              // // (percentage of zoom on a wheel event)\r\n              // speed: 0.1,\r\n\r\n              // // Minimal zoom distance required before actually applying zoom\r\n              // threshold: 2,\r\n\r\n              // // On category scale, minimal zoom level before actually applying zoom\r\n              // sensitivity: 3,\r\n\r\n              // Function called while the user is zooming\r\n              onZoom: function () {},\r\n              // // Function called once zooming is completed\r\n              // onZoomComplete: function ({ chart: any }) {\r\n              // },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n    return () => {};\r\n  }, []);\r\n\r\n  const updateRange = (newRange: {\r\n    from: string;\r\n    to: string;\r\n    range: number;\r\n    data: string[];\r\n  }) => {\r\n    const minTime = newRange.from;\r\n    const maxTime = newRange.to;\r\n    if (chart.current?.options?.scales?.xAxes?.[0].ticks) {\r\n      chart.current.options.scales.xAxes[0].ticks.min = minTime;\r\n      chart.current.options.scales.xAxes[0].ticks.max = maxTime;\r\n      chart.current.update();\r\n\r\n      setCurrentVisibleTicks({ from: newRange.from, range: newRange.range });\r\n    }\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    const { from, range } = currentVisibleTicks;\r\n    // const positiveRangeFrom = getDateRange({\r\n    //   data: date_list,\r\n    //   minVisible: minVisible,\r\n    //   from: from,\r\n    //   range: range,\r\n    // });\r\n    const newRange = getDateRange({\r\n      data: date_list,\r\n      minVisible: minVisible,\r\n      from: from,\r\n      range: -Math.abs(range),\r\n    });\r\n    updateRange(newRange);\r\n  };\r\n  const handleForwardClick = () => {\r\n    const { from, range } = currentVisibleTicks;\r\n    const positiveRangeFrom = getDateRange({\r\n      data: date_list,\r\n      minVisible: minVisible,\r\n      from: from,\r\n      range: range,\r\n    });\r\n    const newRange = getDateRange({\r\n      data: date_list,\r\n      minVisible: minVisible,\r\n      from: positiveRangeFrom.to,\r\n      range: Math.abs(range),\r\n    });\r\n    updateRange(newRange);\r\n  };\r\n\r\n  const getUniqueVisibleMonth = () => {\r\n    const currentVisibleRange = getDateRange({\r\n      data: date_list,\r\n      minVisible: minVisible,\r\n      from: currentVisibleTicks.from,\r\n      range: currentVisibleTicks.range,\r\n    });\r\n    const dates = currentVisibleRange.data;\r\n\r\n    const visibleMonths = dates.map((d) => moment(d).format(\"MMMM\"));\r\n    return [...new Set(visibleMonths)];\r\n  };\r\n  return (\r\n    <Box\r\n      pt={2}\r\n      pr={2}\r\n      pb={2}\r\n      bgcolor=\"secondary.main\"\r\n      className={classes.container}\r\n    >\r\n      <Box pl={2} pb={2}>\r\n        <Grid container justify=\"space-between\">\r\n          <Typography variant=\"subtitle1\">\r\n            {getUniqueVisibleMonth().join(\"-\")}\r\n          </Typography>\r\n          <Grid item className=\"actions\">\r\n            <Grid container>\r\n              <IconButton\r\n                className={classes.btnStyle}\r\n                onClick={handleBackClick}\r\n                size=\"small\"\r\n              >\r\n                <NavigateBeforeRoundedIcon />\r\n              </IconButton>\r\n              <Box m={1} />\r\n              <IconButton\r\n                className={classes.btnStyle}\r\n                onClick={handleForwardClick}\r\n                size=\"small\"\r\n              >\r\n                <NavigateNextRoundedIcon />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Box\r\n        style={{\r\n          cursor: isGrabbed ? \"grabbing\" : \"grab\",\r\n        }}\r\n      >\r\n        <canvas id=\"myChart\" ref={canvas} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(Chart, () => true);\r\n","import moment from \"moment\";\r\nimport { ChartDateFormats } from \"components/HistoryGraph/Chart\";\r\nexport const getDateRange = ({\r\n  data,\r\n  from,\r\n  minVisible,\r\n  to,\r\n  range,\r\n}: {\r\n  data: string[];\r\n  from: string;\r\n  minVisible: number;\r\n  to?: string;\r\n  range?: number;\r\n}) => {\r\n  \r\n  const [dataRangeFrom, dataRangeTo] = [\r\n    moment(data[0]).toDate(),\r\n    moment(data[data.length - 1]).toDate(),\r\n  ];\r\n  const _from: Date = moment(from).toDate();\r\n  const _to = to\r\n    ? moment(to).toDate()\r\n    : moment(from).add(range, \"days\").toDate();\r\n  const _range = range ? range : moment(_to).diff(moment(_from), \"days\");\r\n\r\n  let left: Date, right: Date;\r\n  const isCurrentInsideRange =\r\n    moment(_from).isSameOrAfter(dataRangeFrom) &&\r\n    moment(_from).isSameOrBefore(dataRangeTo);\r\n\r\n  const isChangeInsideRange =\r\n    moment(_to).isSameOrAfter(dataRangeFrom) &&\r\n    moment(_to).isSameOrBefore(dataRangeTo);\r\n\r\n  \r\n  if (isCurrentInsideRange || isChangeInsideRange) {\r\n    if (isChangeInsideRange) {\r\n      if (moment(_to).isSameOrAfter(_from)) {\r\n        left = _from;\r\n        right = _to;\r\n      } else {\r\n        left = _to;\r\n        right = _from;\r\n      }\r\n    } else {\r\n      if (moment(_to).isSameOrAfter(_from)) {\r\n        left = _from;\r\n        right = dataRangeTo;\r\n      } else {\r\n        left = dataRangeFrom;\r\n        right = _from;\r\n      }\r\n    }\r\n  } else {\r\n    if (_range >= 0) {\r\n      left = moment(dataRangeTo).subtract(minVisible, \"days\").toDate();\r\n      right = dataRangeTo;\r\n    } else {\r\n      left = dataRangeFrom;\r\n      right = moment(dataRangeFrom).add(minVisible, \"days\").toDate();\r\n    }\r\n  }\r\n\r\n  const diff = Math.abs(moment(right).diff(left, \"days\"));\r\n\r\n  if (diff >= minVisible) {\r\n    return {\r\n      from: moment(left).format(ChartDateFormats.INNER),\r\n      to: moment(right).format(ChartDateFormats.INNER),\r\n      range: diff,\r\n      data: data.filter(\r\n        (d, index) =>\r\n          moment(d).isSameOrAfter(left) && moment(d).isSameOrBefore(right)\r\n      ),\r\n    };\r\n  } else {\r\n    if (moment(left).isSame(dataRangeFrom)) {\r\n      const isMinVisRangeIsInsideOfData = moment(left)\r\n        .add(minVisible, \"days\")\r\n        .isBefore(dataRangeTo);\r\n      const extendedTo = isMinVisRangeIsInsideOfData\r\n        ? moment(left).add(minVisible, \"days\").toDate()\r\n        : moment(dataRangeTo).toDate();\r\n\r\n      return {\r\n        from: moment(left).format(ChartDateFormats.INNER),\r\n        to: moment(extendedTo).format(ChartDateFormats.INNER),\r\n        range: isMinVisRangeIsInsideOfData\r\n          ? minVisible\r\n          : moment(left).diff(moment(extendedTo), \"days\"),\r\n        data: data.filter(\r\n          (d, index) =>\r\n            moment(d).isSameOrAfter(left) &&\r\n            moment(d).isSameOrBefore(extendedTo)\r\n        ),\r\n      };\r\n    } else if (moment(right).isSame(dataRangeTo)) {\r\n      const isMinVisRangeIsInsideOfData = moment(right)\r\n        .subtract(minVisible, \"days\")\r\n        .isAfter(dataRangeFrom);\r\n      const extendedFrom = isMinVisRangeIsInsideOfData\r\n        ? moment(right).subtract(minVisible, \"days\").toDate()\r\n        : moment(dataRangeFrom).toDate();\r\n\r\n      return {\r\n        from: moment(extendedFrom).format(ChartDateFormats.INNER),\r\n        to: moment(right).format(ChartDateFormats.INNER),\r\n        range: isMinVisRangeIsInsideOfData\r\n          ? minVisible\r\n          : moment(right).diff(moment(extendedFrom), \"days\"),\r\n        data: data.filter(\r\n          (d, index) =>\r\n            moment(d).isSameOrBefore(right) &&\r\n            moment(d).isSameOrAfter(extendedFrom)\r\n        ),\r\n      };\r\n    } else {\r\n      return {\r\n        from: moment(left).format(ChartDateFormats.INNER),\r\n        to: moment(left).add(minVisible, \"days\").format(ChartDateFormats.INNER),\r\n        range: minVisible,\r\n        data: data.filter(\r\n          (d, index) =>\r\n            moment(d).isSameOrAfter(left) &&\r\n            moment(d).isSameOrBefore(moment(left).add(minVisible, \"days\"))\r\n        ),\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport const getRangeFromData = (\r\n  from: string,\r\n  to: string,\r\n  data: string[],\r\n  minVisible: number\r\n) => {};\r\n","import React, { useContext } from \"react\";\r\nimport { getSelectedZoneObjById } from \"../../utils/getSelectedZoneObj\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport Chart from \"./Chart\";\r\nimport { Box, Typography } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport interface GraphProps {}\r\n\r\nconst Graph: React.SFC<GraphProps> = () => {\r\n  const { zones, selectedZoneId } = useContext(StateContext);\r\n  const { t } = useTranslation()\r\n\r\n  const selectedZone: any = getSelectedZoneObjById(selectedZoneId, zones);\r\n  const { history = [] } = selectedZone?.properties || {};\r\n  return (\r\n    <Box mt={4} mb={4}>\r\n      <Box mb={1}>\r\n        <Typography variant=\"subtitle1\">{t('history.title')}</Typography>\r\n      </Box>\r\n      <Chart data={history} minVisible={8} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"sourceRoot":""}