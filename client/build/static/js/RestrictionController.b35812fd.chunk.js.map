{"version":3,"sources":["components/Restrictions/Editor.tsx","components/Restrictions/RestrictionController.tsx"],"names":["Editor","props","restrictions","handleSave","editor","useRef","useEffect","current","EditorJS","holder","tools","header","class","Header","inlineToolbar","list","List","data","destroy","id","onClick","save","then","RestrictionController","socket","useContext","StateContext","zones","selectedZoneId","selectedZone","getSelectedZoneObjById","style","border","properties","restrictionsUz","emit","zoneId","once"],"mappings":"qMAkDeA,EAxCwB,SAACC,GAAW,IACzCC,EAA6BD,EAA7BC,aAAcC,EAAeF,EAAfE,WAChBC,EAASC,mBAsBf,OArBAC,qBAAU,WAeR,OAdAF,EAAOG,QAAU,IAAIC,IAAS,CAC5BC,OAAQ,WACRC,MAAO,CACLC,OAAQ,CACNC,MAAOC,IACPC,cAAe,CAAC,SAElBC,KAAM,CACJH,MAAOI,IACPF,eAAe,IAGnBG,KAAMf,IAED,WAAO,IAAD,EACgB,GAA3B,UAAGE,EAAOG,eAAV,aAAG,EAAgBW,WACjB,UAAAd,EAAOG,eAAP,SAAgBW,cAGnB,CAAChB,IAEF,oCACE,yBAAKiB,GAAG,aACR,4BACEC,QAAS,WACPhB,EAAOG,QAAQc,OAAOC,MAAK,SAACL,GAC1Bd,EAAWc,QAHjB,UCDSM,UA3BsD,SACnEtB,GACI,IAAD,EACKuB,EAAWvB,EAAXuB,OADL,EAE+BC,qBAAWC,KAArCC,EAFL,EAEKA,MAAOC,EAFZ,EAEYA,eACTC,EAAoBC,YAAuBF,EAAgBD,GAYjE,OACE,yBAAKI,MAAO,CAAEC,OAAQ,mBACpB,kBAAC,EAAD,CACE9B,aAAY,OAAE2B,QAAF,IAAEA,GAAF,UAAEA,EAAcI,kBAAhB,aAAE,EAA0BC,eACxC/B,WAda,SAACc,GAElBO,EAAOW,KAAK,oBAAqB,CAC/BC,OAAQR,EACR1B,aAAce,IAEhBO,EAAOa,KAAK,6BAA6B,WACvCb,EAAOW,KAAK","file":"static/js/RestrictionController.b35812fd.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport EditorJS from \"@editorjs/editorjs\";\nimport Header from \"@editorjs/header\";\nimport List from \"@editorjs/list\";\n\nexport interface EditorProps {\n  restrictions: any;\n  handleSave: (data: any) => void;\n}\n\nconst Editor: React.SFC<EditorProps> = (props) => {\n  const { restrictions, handleSave } = props;\n  const editor = useRef<any>();\n  useEffect(() => {\n    editor.current = new EditorJS({\n      holder: \"editorjs\",\n      tools: {\n        header: {\n          class: Header,\n          inlineToolbar: [\"link\"],\n        },\n        list: {\n          class: List,\n          inlineToolbar: true,\n        },\n      },\n      data: restrictions,\n    });\n    return () => {\n      if(editor.current?.destroy){\n        editor.current?.destroy();\n      }\n    };\n  }, [restrictions]);\n  return (\n    <>\n      <div id=\"editorjs\" />\n      <button\n        onClick={() => {\n          editor.current.save().then((data: any) => {\n            handleSave(data);\n          });\n        }}\n      >\n        Save\n      </button>\n    </>\n  );\n};\n\nexport default Editor;\n","import React, { useContext } from \"react\";\nimport { StateContext } from \"../../state/StateContext\";\nimport { getSelectedZoneObjById } from \"../../utils/getSelectedZoneObj\";\nimport Editor from \"./Editor\";\n\nexport interface RestrictionControllerProps {\n  socket: any;\n}\n\nconst RestrictionController: React.SFC<RestrictionControllerProps> = (\n  props\n) => {\n  const { socket } = props;\n  const { zones, selectedZoneId } = useContext(StateContext);\n  const selectedZone: any = getSelectedZoneObjById(selectedZoneId, zones);\n\n  const handleSave = (data: any) => {\n\n    socket.emit(\"edit_restrictions\", {\n      zoneId: selectedZoneId,\n      restrictions: data,\n    });\n    socket.once(\"edit_restrictions_success\", () => {\n      socket.emit(\"initial_data\");\n    });\n  };\n  return (\n    <div style={{ border: \"1px solid #333\" }}>\n      <Editor\n        restrictions={selectedZone?.properties?.restrictionsUz}\n        handleSave={handleSave}\n      />\n    </div>\n  );\n};\n\nexport default RestrictionController;\n"],"sourceRoot":""}