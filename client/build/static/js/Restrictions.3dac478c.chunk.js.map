{"version":3,"sources":["components/Restrictions/Restrictions.tsx","utils/editorToHTMLParser.tsx"],"names":["Restrictions","props","restrictions","useContext","StateContext","zones","selectedZoneId","selectedZone","getSelectedZoneObjById","getLanguage","properties","restrictionsUz","restrictionsRu","Box","mt","mb","blocks","map","block","index","elemToReturn","text","ReactHtmlParser","data","type","level","list","items","i","key","style","caption","src","file","url","alt","editorToHTMLParser"],"mappings":"sMA+BeA,UAtBoC,SAACC,GAAW,IAAD,QAGxDC,EAFJ,EAAkCC,qBAAWC,KAArCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,eACTC,EAAeC,YAAuBF,EAAgBD,GAE5D,OAAQI,eACN,IAAK,KACHP,EAAY,OAAGK,QAAH,IAAGA,GAAH,UAAGA,EAAcG,kBAAjB,aAAG,EAA0BC,eACzC,MACF,IAAK,KACHT,EAAY,OAAGK,QAAH,IAAGA,GAAH,UAAGA,EAAcG,kBAAjB,aAAG,EAA0BE,eACzC,MACF,QACEV,EAAY,OAAGK,QAAH,IAAGA,GAAH,UAAGA,EAAcG,kBAAjB,aAAG,EAA0BC,eAG7C,OACE,kBAACE,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GCvBc,WAAuB,IAAtBC,EAAqB,uDAAP,GAC/C,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAQC,KAAI,SAACC,EAAYC,GAAmB,IAAD,IAE5CC,EADEC,EAAOC,IAAgBJ,EAAMK,KAAKF,MAExC,cAAQH,QAAR,IAAQA,OAAR,EAAQA,EAAOM,MACb,IAAK,YACHJ,EAAe,6BACf,MACF,IAAK,SACH,cAAQF,QAAR,IAAQA,GAAR,UAAQA,EAAOK,YAAf,aAAQ,EAAaE,OACnB,KAAK,EACHL,EAAe,4BAAKC,GACpB,MACF,KAAK,EACHD,EAAe,4BAAKC,GACpB,MACF,KAAK,EACHD,EAAe,4BAAKC,GACpB,MACF,KAAK,EACHD,EAAe,4BAAKC,GACpB,MACF,KAAK,EACHD,EAAe,4BAAKC,GACpB,MACF,KAAK,EACHD,EAAe,4BAAKC,GACpB,MACF,QACED,EAAe,4BAAKC,GAGxB,MAEF,IAAK,YACHD,EAAe,2BAAIC,GACnB,MAEF,IAAK,OACH,IAAMK,EAAOR,EAAMK,KAAKI,MAAMV,KAAI,SAACW,GAAD,OAChC,wBAAIC,IAAKD,GAAIN,IAAgBM,OAE/B,cAAQV,QAAR,IAAQA,GAAR,UAAQA,EAAOK,YAAf,aAAQ,EAAaO,OACnB,IAAK,YACHV,EAAe,4BAAKM,GACpB,MACF,IAAK,UACHN,EAAe,4BAAKM,GACpB,MAEF,QACEN,EAAe,4BAAKM,GAExB,MAEF,IAAK,QACH,IAAIK,EAAUb,EAAMK,KAAKQ,QAAUb,EAAMK,KAAKQ,QAAU,QACxDX,EAAe,yBAAKY,IAAKd,EAAMK,KAAKU,KAAKC,IAAKC,IAAKJ,IACnD,MAEF,QACEX,EAAe,qCAEnB,OAAO,kBAAC,WAAD,CAAUS,IAAKV,GAAQC,MDvC3BgB,CAAkB,UAAClC,SAAD,aAAC,EAAcc","file":"static/js/Restrictions.3dac478c.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { StateContext } from \"../../state/StateContext\";\nimport { getSelectedZoneObjById } from \"../../utils/getSelectedZoneObj\";\nimport { editorToHTMLParser } from \"../../utils/editorToHTMLParser\";\nimport { Box } from \"@material-ui/core\";\nimport { getLanguage } from \"../../utils/getLanguage\";\n\nexport interface RestrictionsProps {}\n\nconst Restrictions: React.SFC<RestrictionsProps> = (props) => {\n  const { zones, selectedZoneId } = useContext(StateContext);\n  const selectedZone = getSelectedZoneObjById(selectedZoneId, zones);\n  let restrictions: any;\n  switch (getLanguage()) {\n    case 'uz':\n      restrictions = selectedZone?.properties?.restrictionsUz\n      break;\n    case 'ru':\n      restrictions = selectedZone?.properties?.restrictionsRu\n      break;\n    default:\n      restrictions = selectedZone?.properties?.restrictionsUz\n      break;\n  }\n  return (\n    <Box mt={4} mb={4}>\n      {editorToHTMLParser(restrictions?.blocks)}\n    </Box>\n  );\n};\n\nexport default Restrictions;\n","import React, { Fragment } from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nexport const editorToHTMLParser = (blocks: any = []) => {\n  return blocks?.map((block: any, index: number) => {\n    const text = ReactHtmlParser(block.data.text);\n    let elemToReturn: any;\n    switch (block?.type) {\n      case \"delimiter\":\n        elemToReturn = <br />;\n        break;\n      case \"header\":\n        switch (block?.data?.level) {\n          case 1:\n            elemToReturn = <h1>{text}</h1>;\n            break;\n          case 2:\n            elemToReturn = <h2>{text}</h2>;\n            break;\n          case 3:\n            elemToReturn = <h3>{text}</h3>;\n            break;\n          case 4:\n            elemToReturn = <h4>{text}</h4>;\n            break;\n          case 5:\n            elemToReturn = <h5>{text}</h5>;\n            break;\n          case 6:\n            elemToReturn = <h6>{text}</h6>;\n            break;\n          default:\n            elemToReturn = <h4>{text}</h4>;\n            break;\n        }\n        break;\n\n      case \"paragraph\":\n        elemToReturn = <p>{text}</p>;\n        break;\n\n      case \"list\":\n        const list = block.data.items.map((i: any) => (\n          <li key={i}>{ReactHtmlParser(i)}</li>\n        ));\n        switch (block?.data?.style) {\n          case \"unordered\":\n            elemToReturn = <ul>{list}</ul>;\n            break;\n          case \"ordered\":\n            elemToReturn = <ol>{list}</ol>;\n            break;\n\n          default:\n            elemToReturn = <ol>{list}</ol>;\n        }\n        break;\n\n      case \"image\":\n        let caption = block.data.caption ? block.data.caption : \"Image\";\n        elemToReturn = <img src={block.data.file.url} alt={caption} />;\n        break;\n\n      default:\n        elemToReturn = <></>;\n    }\n    return <Fragment key={index}>{elemToReturn}</Fragment>;\n  });\n};\n"],"sourceRoot":""}